datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  addresses Address[]
  carts     Cart[]
  orders    Order[]
}

model Address {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  line1      String
  line2      String?
  city       String
  country    String
  postalCode String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Category {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Product {
  id          String          @id @default(uuid())
  name        String
  slug        String          @unique
  description String?
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  String
  variants    ProductVariant[]
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model ProductVariant {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  sku       String   @unique
  price     Int
  stock     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  cartItems CartItem[]
  orderItems OrderItem[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Coupon {
  id        String   @id @default(uuid())
  code      String   @unique
  discount  Int
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  carts     Cart[]
}

model Cart {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  items     CartItem[]
  coupon    Coupon?  @relation(fields: [couponId], references: [id])
  couponId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  order     Order?
}

model CartItem {
  id          String         @id @default(uuid())
  cart        Cart           @relation(fields: [cartId], references: [id])
  cartId      String
  variant     ProductVariant @relation(fields: [variantId], references: [id])
  variantId   String
  quantity    Int
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Order {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  items     OrderItem[]
  payments  Payment[]
  shipments Shipment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model OrderItem {
  id        String         @id @default(uuid())
  order     Order          @relation(fields: [orderId], references: [id])
  orderId   String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Payment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  amount    Int
  method    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Shipment {
  id             String   @id @default(uuid())
  order          Order    @relation(fields: [orderId], references: [id])
  orderId        String
  trackingNumber String?
  carrier        String?
  status         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?
}
